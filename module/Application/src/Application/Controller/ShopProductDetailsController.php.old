<?php

namespace Application\Controller;

use \Validador\Controller\ValidadorController;
use \Useful\Controller\UsefulController;

/**
 * Detalhes do produto
 *
 * @author Claudio
 *        
 */
class ShopProductDetailsController extends ApplicationController {
	/**
	 *
	 * {@inheritDoc}
	 *
	 * @see \Zend\Mvc\Controller\AbstractActionController::indexAction()
	 */
	public function indexAction() {
		return $this->viewModel->setTerminal ( true );
	}
	/**
	 * Obtem dados de um item
	 */
	public function editAction() {
		// Default
		$data = $this->translate ( "Unknown Error, try again, please." );
		$outcome = $status = false;
		// GET
		$Params = $this->params ();
		$id = $Params->fromQuery ( 'id', null );
		if (! ValidadorController::isValidDigits ( $id )) {
			$data = $this->translate ( 'Invalid Id' );
		} else {
			// Edit
			$Products = new \Shop\Controller\ProjectsController ( $this->getServiceLocator () );
			$Family = new \Shop\Controller\FamiliesController ( $this->getServiceLocator () );
			$Licenses = new \Shop\Controller\FamilyHasLicenseController ( $this->getServiceLocator () );
			$Formats = new \Shop\Controller\FamilyHasFormatsController ( $this->getServiceLocator () );
			$Files = new \Shop\Controller\FamilyFilesController ( $this->getServiceLocator () );
			
			$LicenseUser = new \Shop\Controller\LicensesController ( $this->getServiceLocator () );
			$LicensesHasFormats = new \Shop\Controller\LicenseHasFormatsController ( $this->getServiceLocator () );
			
			$rs = $Products->find ( $id, null );
			// Exists?
			if ($rs) {
				// Projeto
				$projects = UsefulController::getStripslashes ( $rs );
				$projects ['collection'] = '0.00';
				$projects ['styles'] = array();
				// Familia
				$families = UsefulController::paginatorToArray ( $Family->fetchAll ( $projects->company_id, $projects->id ) );
				if (count ( $families ) > 0) {
					foreach ( $families as $f_key => $f_item ) {
						$families [$f_key] = UsefulController::getStripslashes ( $f_item );
						// Licenas
						$licenses = UsefulController::paginatorToArray ( $Licenses->fetchAll ( $projects->company_id, $f_item->id, $projects->id ) );
						if (count ( $licenses ) > 0) {
							foreach ( $licenses as $lc_key => $lc_item ) {
								$licenses [$lc_key] = UsefulController::getStripslashes ( $lc_item );
								
								$projects ['collection'] += floatval ( $lc_item->money_family );
								$licenses [$lc_key]['collection'][$lc_item->id] = floatval ( $lc_item->money_family );
							}
						} else {
							$licenses = array ();
						}
						
						$families [$f_key] ['licenses'] = $licenses;
						$projects ['styles'][$f_item->id] = array();
						// Formatos
						$formats = UsefulController::paginatorToArray ( $Formats->fetchAll ( $projects->company_id, $f_item->id, $projects->id ) );
						if (count ( $formats ) > 0) {
							foreach ( $formats as $t_key => $t_item ) {
								$formats [$t_key] = UsefulController::getStripslashes ( $t_item );
								
								$projects ['styles'][$f_item->id][$t_item->id] = array();
								// Fontes
								$files = UsefulController::paginatorToArray ( $Files->fetchAll ( $projects->company_id, $projects->id, $f_item->id, $t_item->id, $t_item->license_formats_id ) );
								if (count ( $files )) {
									foreach ( $files as $fs_key => $fs_item ) {
										$files [$fs_key] = UsefulController::getStripslashes ( $fs_item );
										
										$projects ['styles'][$f_item->id][$t_item->id][$fs_item->id] = array();
									}
								} else {
									$files = array ();
								}
								
								$formats [$t_key] ['files'] = $files;
							}
						} else {
							$formats = array ();
						}
						
						$families [$f_key] ['formats'] = $formats;
					}
				}
				// Licenses
				$licenses = UsefulController::paginatorToArray ( $LicenseUser->fetchAllActive ( $projects->company_id ) );
				if (count ( $licenses ) > 0) {
					foreach ( $licenses as $lu_key => $lu_item ) {
						$licenses [$lu_key] = UsefulController::getStripslashes ( $lu_item );
						
						$licenses [$lu_key] ['check_trial'] = $licenses [$lu_key] ['check_trial'] == 1 ? true : false;
						$licenses [$lu_key] ['check_desktop'] = $licenses [$lu_key] ['check_desktop'] == 1 ? true : false;
						$licenses [$lu_key] ['check_app'] = $licenses [$lu_key] ['check_app'] == 1 ? true : false;
						$licenses [$lu_key] ['check_web'] = $licenses [$lu_key] ['check_web'] == 1 ? true : false;
						$licenses [$lu_key] ['check_enabled'] = $licenses [$lu_key] ['check_enabled'] == 1 ? true : false;
						
						$licenses [$lu_key] ['formats'] = array (
								array (),
								array (),
								array (),
								array () 
						);
						
						$lu_formats = $LicensesHasFormats->fetchAll ( $lu_item->id, $projects->company_id );
						if ($lu_formats->count () > 0) {
							$arr = iterator_to_array ( $lu_formats->getCurrentItems () );
							foreach ( $arr as $w_key => $w_item ) {
								$font = array ();
								$font ['id'] = isset ( $w_item ['id'] ) ? $w_item ['id'] : null;
								$font ['parameters'] = isset ( $w_item ['parameters'] ) ? $w_item ['parameters'] : null;
								$font ['multiplier'] = isset ( $w_item ['multiplier'] ) ? $w_item ['multiplier'] : null;
								$seq = $font ['sequence'] = isset ( $w_item ['sequence'] ) ? $w_item ['sequence'] : 0;
								
								$f_key = isset ( $w_item ['license_formats_id'] ) ? $w_item ['license_formats_id'] : 0;
								$licenses [$lu_key] ['formats'] [$f_key] [$seq] = $font;
							}
						}
					}
				}
				// Retorno
				$outcome = $status = true;
				$data = array (
						'project' => $projects,
						'families' => $families,
						'licenses' => $licenses 
				);
			} else {
				$data = $this->translate ( 'Invalid Id' );
			}
		}
		// Response
		self::showResponse ( $status, $data, $outcome, true );
		die ();
	}
}